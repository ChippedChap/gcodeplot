import sys
import svgpath.parser as parser

PRELIM = """// OpenSCAD file automatically generated by svg2cookiercutter.py
wallHeight = 10;
wallBaseWidth = 2;
wallBaseThickness = 1.5;
minWallThickness = 1;
featureHeight = 5;
minFeatureThickness = 0.25;
featureHolderThickness = 1;

module ribbon(points, thickness=1, closed=false) {
    p = closed ? concat(points, [points[0]]) : points;
    
    union() {
        for (i=[1:len(p)-1]) {
            hull() {
                translate(p[i-1]) circle(d=thickness, $fn=8);
                translate(p[i]) circle(d=thickness, $fn=8);
            }
        }
    }
}

"""

class Line(object):
    def __init__(self, height="featureHeight", width="0.5", base=False, wall=False):
        self.height = height
        self.width = width
        self.base = base
        self.wall = wall
        self.points = []
        
    def toCode(self, pathCount):
        code = []
        path = 'path'+str(pathCount)
        code.append( path + '=[' + ','.join(('[%.3f,%.3f]'%tuple(p) for p in self.points)) + '];' );
        if not self.base:
            code.append('render(convexity=12) linear_extrude(height=('+self.height+')) ribbon('+path+',thickness='+self.width+');')
            if self.wall:
                baseRibbon = 'render(convexity=12) linear_extrude(height=wallBaseThickness) ribbon('+path+',thickness=wallBaseWidth);'
                if tuple(self.points[0]) == tuple(self.points[-1]):
                    code.append('difference() {')
                    code.append(' ' + baseRibbon);
                    code.append(' translate([0,0,-0.01]) linear_extrude(height=wallBaseThickness+0.02) polygon(points='+path+');')
                    code.append('}')
                else:
                    code.append(baseRibbon)
        else:
            code.append('render(convexity=12) linear_extrude(height=featureHolderThickness) polygon(points='+path+');')
        return code
        
def isRed(rgb):
    return rgb is not None and rgb[0] >= 0.4 and rgb[1]+rgb[2] < rgb[0] * 0.25

def svgToCookieCutter(filename, tolerance=0.1, strokeAll = False):
    code = [PRELIM]
    pathCount = 0;
    
    for superpath in parser.getPathsFromSVGFile(filename)[0]:
        for path in superpath.breakup():
            line = Line()
            
            if path.svgState.fill is not None:
                line.base = True
            elif strokeAll or path.svgState.stroke is not None:
                line.base = False
                if isRed(path.svgState.stroke):
                    line.width = "max(%.3f,minWallThickness)" % path.svgState.strokeWidth
                    line.height = "wallHeight"
                    line.wall = True
                else:
                    line.width = "max(%.3f,minFeatureThickness)" % path.svgState.strokeWidth
                    line.height = "featureHeight"
                    line.wall = False
            else:
                continue
                
            lines = path.linearApproximation(error=tolerance)
            
            line.points = [(l.start.real,l.start.imag) for l in lines]
            line.points.append((lines[-1].end.real, lines[-1].end.imag))
            
            code += line.toCode(pathCount)
            pathCount += 1

    return '\n'.join(code)
    
if __name__ == '__main__':
    print(svgToCookieCutter(sys.argv[1]))
    